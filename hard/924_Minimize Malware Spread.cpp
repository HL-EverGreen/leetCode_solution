class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        // Union find
        // time complexity: O(n^3), space complexity: O(n)
        // 176ms, beats 72.14%
        
        // main idea:
        // Use union find to track each node's group, and count each group's number of nodes
        // Avoid those initial nodes which belongs to same group

        int n = graph.size(), n1 = initial.size();
        parent = vector<int>(n);                            // Used to track union id
        vector<int> count(n, 1);                            // Count how many elements belongs to this same group
        for(int i = 0; i < n; i++) parent[i] = i;
        
        // Group all nodes and count how many nodes each group has
        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j < n; j++) {
                if(graph[i][j]) {
                    int par_i = find(i), par_j = find(j);
                    if(par_i != par_j) {
                        parent[par_j] = par_i;
                        count[par_i] += count[par_j];
                    }
                }
            }
        }
        
        int res = n, cur_max = 0;
        vector<int> count_ini(n, 0);                        // Used to avoid initial nodes that belongs to the same group where another initial nodes belongs to
        for(auto& ini : initial) {
            res = min(res, ini);
            count_ini[find(ini)]++;
        }
        
        for(auto& ini : initial) {
            int par = find(ini);
            if(count_ini[par] == 1) {                       // Choose those initial nodes in unique group
                if(count[par] > cur_max) {
                    cur_max = count[par];
                    res = ini;
                } else if(count[par] == cur_max) res = min(res, ini);
            }
        }
        return res;
    }
private:
    vector<int> parent;
    
    int find(int x) {
        if(parent[x] == x) return x;
        else return find(parent[x]);
    }
    
};